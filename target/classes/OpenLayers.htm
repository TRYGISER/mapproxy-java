<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <link rel="stylesheet" href="OpenLayers-2.7/theme/default/style.css" type="text/css" />
    <link rel="stylesheet" href="style.css" type="text/css" />
    <style type="text/css">
        body { background-color: #FFFFFF;
              margin-left: 0px; margin-right: 0px; margin-top: 0px; margin-bottom: 0px;
        }
        body, textarea, input, td {
              font-family:"MS Sans Serif",tahoma,arial,helvetica,sans-serif;
              font-size: 8pt;color:#000000;text-decoration:none; text-align:left;font-weight: normal;
        }
    </style>
    <script src="http://www.openlayers.org/api/OpenLayers.js"></script>
    <script type="text/javascript">
        var lon = 0;
        var lat = 0;
        var zoom = 2;
        var map, layer, tags;

        function init(){
            //map = new OpenLayers.Map( 'map' );
            tags = document.getElementById("tags");


            map = new OpenLayers.Map( 'map',
            {
                //maxExtent: new OpenLayers.Bounds(-130, 30, -80, 55),
                //maxResolution: 360 / 256 / Math.pow(2, 4),

                maxExtent: new OpenLayers.Bounds(-180, -90, 180, 90),
                //minScale: 70000000,
                //maxScale: 1000,
                units: "degrees"
            });


        map.projection = new OpenLayers.Projection("EPSG:4326");
	map.displayProjection = new OpenLayers.Projection("EPSG:4326");


            var wms = new OpenLayers.Layer.WMS(
              "MapProxy",
              "http://localhost:9080/WMS/",
              {
                layers: 'Default Basemap', //List of layers to display
                format: 'image/png'
              },                                 
              { tileSize: new OpenLayers.Size(256,256), buffer: 1, 'isBaseLayer':true }  //Rendering options

            );
            //map.addLayer(wms);



            var vmap = new OpenLayers.Layer.TMS( "VMAP",
                "http://tilecache.osgeo.org/wms-c/Basic.py/",
                {
                    layername: 'basic', type:'png', zoomOffset: -1,
                    projection: new OpenLayers.Projection("EPSG:4326")
                }
            );
            map.addLayer(vmap);



            var tms = new OpenLayers.Layer.TMS(
                "TMS",
                "http://localhost:9080/TMS/",
                {
                    layername: 'Default Basemap', type:'png', zoomOffset: -1,
                    projection: new OpenLayers.Projection("EPSG:4326")
                }
            );
            map.addLayer(tms);


            var arcgis = new OpenLayers.Layer.ArcGIS93Rest(
                "ArcGIS",
                "http://localhost:9080/ArcGIS/",
                {
                 layers: "Default Basemap"
                }
            );
            map.addLayer(arcgis);



            layer = new OpenLayers.Layer.WMS(
              "OpenLayers WMS",
              "http://www.kartographia.com/MapProxy/demo/mapproxy.jsp", //"/cgi-bin/mapserv.exe?map=D:/maps/world.map", 
              {
                layers: 'world_grid,polboundaries,hydro,cities,geogrid', //List of layers to display
                format: 'image/png'
              },                                 
              { tileSize: new OpenLayers.Size(256,256), buffer: 1, 'isBaseLayer':true }  //Rendering options

            );
            //map.addLayer(layer);



            var highways = new OpenLayers.Layer.ArcGIS93Rest("Highways",
                "http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Specialty/ESRI_StateCityHighway_USA/MapServer/export",
                {
                 layers: "0,1,2"
                }
            );
            //map.addLayer(highways);

            var modis = new OpenLayers.Layer.ArcGIS93Rest("MODIS",
                "http://localhost:9080/ImageServer", //"http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/World/MODIS/ImageServer/exportImage",
                {
                 layers: "0"
                },
                {
                    'singleTile':true,
                    'transitionEffect':'resize'}
            );
            //map.addLayer(modis);

            map.setCenter(new OpenLayers.LonLat(lon, lat), zoom);
            map.addControl( new OpenLayers.Control.LayerSwitcher() );



          //Add logic to process map move events. This event is fired whenever
          //the map is moved or the extents have changed.
            map.events.register("moveend", null, function(e){
                var scale = map.getScale();
                //document.forms[0].scale.value = "1:"+addCommas(Math.round(scale));
                document.title = "1:"+addCommas(Math.round(scale));
            });
            

            map.events.register("mousemove", null, function(e){

                var lonlat = map.getLonLatFromViewPortPx(e.xy);
                if(lonlat == null){
                    return;
                }
                var lat = lonlat.lat;
                var lon = lonlat.lon;


                var p = 1000000000; //precision
                lat = Math.round(lat*p)/p;
                lon = Math.round(lon*p)/p;

                p = (p + '').length-1;

                if (lat.toString().indexOf(".")<0) {
                    lat+=".0000";
                }
                if (lon.toString().indexOf(".")<0) {
                    lon+=".0000";
                }

                var arr = (lat + '0000000000').split("\.");
                arr[1] = arr[1].substring(0, p);
                lat = arr[0] + "." + arr[1];

                arr = (lon + '0000000000').split("\.");
                arr[1] = arr[1].substring(0, p);
                lon = arr[0] + "." + arr[1];

                tags.innerHTML = lat + ", " + lon;
            });


            function addCommas(nStr){
                nStr += '';
                x = nStr.split('.');
                x1 = x[0];
                x2 = x.length > 1 ? '.' + x[1] : '';
                var rgx = /(\d+)(\d{3})/;
                while (rgx.test(x1)) {
                    x1 = x1.replace(rgx, '$1' + ',' + '$2');
                }
                return x1 + x2;
            }

        }
    </script>
  </head>
  <body onload="init()">
    <table width="100%" height="100%" border="0">
     <tr>
       <td id="map" width="100%" height="100%"></td>
     </tr>
     <tr>
       <td id="tags" align="right" height="20"></td>
     </tr>
    </table>

  </body>
</html>